import random
import re
import vk_api
from config import token
import time
import json

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤ –∏ –≥—Ä–∞–Ω–µ–π
MAX_DICE_COUNT = 250
MAX_DICE_SIDES = 100

# –≠–º–æ–¥–∑–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –±—Ä–æ—Å–∫–æ–≤ 20-–≥—Ä–∞–Ω–Ω—ã—Ö –∫—É–±–∏–∫–æ–≤ –∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
CRIT_FAIL_EMOJI = "‚ò†Ô∏è"
CRIT_SUCCESS_EMOJI = "üí•"
GEAR_EMOJI = "‚öôÔ∏è"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –∏ API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
vk_session = vk_api.VkApi(token=token)
vk = vk_session.get_api()

MAX_RETRIES = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
RETRY_DELAY = 15  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

def send_message(peer_id: int, message: str) -> None:
    attempts = 0
    while attempts < MAX_RETRIES:
        try:
            vk.messages.send(
                peer_id=peer_id,
                message=message,
                random_id=random.randint(1, 10**6)
            )
            break  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
        except vk_api.VkApiError as e:
            attempts += 1
            if attempts < MAX_RETRIES:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {RETRY_DELAY} —Å–µ–∫—É–Ω–¥.")
                time.sleep(RETRY_DELAY)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            else:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫.")

def get_user_name(user_id: int) -> str:
    user_info = vk.users.get(user_ids=user_id)
    if user_info:
        return user_info[0].get('first_name', "–¥—Ä—É–≥")
    return "–¥—Ä—É–≥"

def get_last_name(user_id: int) -> str:
    user_info = vk.users.get(user_ids=user_id)
    if user_info:
        return user_info[0].get('last_name', "–±–∞—Ç—å–∫–æ–≤–∏—á")
    return "–±–∞—Ç—å–∫–æ–≤–∏—á"
    
def biased_roll(sides: int, exponent: float = 0.8) -> int:
    """
    –§—É–Ω–∫—Ü–∏—è —Å–º–µ—â–µ–Ω–Ω–æ–≥–æ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞.
    –ü—Ä–∏ exponent < 1 —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —à–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –≤—ã—Å–æ–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π.
    –ò–∑–º–µ–Ω–µ–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞, —á—Ç–æ–±—ã –ø—Ä–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏ r –≤—ã–ø–∞–¥–∞–µ—Ç sides.
    """
    r = random.random()  # —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 1
    return int(sides * (r ** exponent)) + 1

def roll_dice(sides: int, rolls: int = 1) -> list[int]:
    """
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç biased_roll –≤–º–µ—Å—Ç–æ random.randint –¥–ª—è —Å–º–µ—â–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∫ –±–æ–ª—å—à–∏–º —á–∏—Å–ª–∞–º.
    """
    return [biased_roll(sides) for _ in range(rolls)]

def is_fox(username: str) -> str:
    return "–õ–∏—Å–∏—á–∫–∞" if username == "Moonlight" else username

help_message = (
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –∞–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏:\n\n"
    "–î—É—ç–ª—å -  –≤—ã–∑—ã–≤–∞–µ—Ç –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–∞ –¥—É—ç–ª—å.\n"
    "–ê–Ω–µ–∫–¥–æ—Ç -  –≤—ã–∑—ã–≤–∞–µ—Ç –∞–Ω–µ–∫–¥–æ—Ç.\n"
    "–ë—Ä–∞–∫ -  –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∑–∞–∫–ª—é—á–∏—Ç—å –±—Ä–∞–∫ —Å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.\n"
    "–î–ª—è –ø–æ–º–æ—â–∏ —Å –±—Ä–æ—Å–∫–∞–º–∏ –∫—É–±–∏–∫–æ–≤ –Ω–∞–ø–∏—à–∏ '/–ø–æ–º–æ—â—å'.\n"
)

dice_help_message = (
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –∞–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —Å–∏—Å—Ç–µ–º–æ–π –±—Ä–æ—Å–∫–æ–≤ –∫—É–±–∏–∫–æ–≤:\n\n"
    "üé≤ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±—Ä–æ—Å–∫–æ–≤ –∫—É–±–∏–∫–æ–≤:\n"
    "- /–¥20 ‚Äî –±—Ä–æ—Å–∏—Ç—å –æ–¥–∏–Ω 20-–≥—Ä–∞–Ω–Ω—ã–π –∫—É–±–∏–∫.\n"
    "- /3–¥6 ‚Äî –±—Ä–æ—Å–∏—Ç—å —Ç—Ä–∏ 6-–≥—Ä–∞–Ω–Ω—ã—Ö –∫—É–±–∏–∫–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å—É–º–º—É.\n"
    "- /–¥20+5 ‚Äî –±—Ä–æ—Å–∏—Ç—å –æ–¥–∏–Ω 20-–≥—Ä–∞–Ω–Ω—ã–π –∫—É–±–∏–∫ –∏ –¥–æ–±–∞–≤–∏—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä +5.\n\n"
    "üìã –ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:\n"
    "- /–¥20 ‚Äî –æ–±—ã—á–Ω—ã–π –±—Ä–æ—Å–æ–∫ 20-–≥—Ä–∞–Ω–Ω–æ–≥–æ –∫—É–±–∏–∫–∞.\n"
    "- /2–¥10+3 ‚Äî –±—Ä–æ—Å–∏—Ç—å –¥–≤–∞ 10-–≥—Ä–∞–Ω–Ω—ã—Ö –∫—É–±–∏–∫–∞ –∏ –¥–æ–±–∞–≤–∏—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä +3.\n\n"
    "–ù–∞–ø–∏—à–∏ '–ø–æ–º–æ—â—å', –µ—Å–ª–∏ —Ç–µ–±–µ —Å–Ω–æ–≤–∞ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —ç—Ç–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è. –£–¥–∞—á–∏ –≤ –±—Ä–æ—Å–∫–∞—Ö! üé≤"
)

def get_random_joke():
    with open('jokes.json', 'r', encoding='utf-8') as file:
        jokes = json.load(file)
    return random.choice(jokes)

def calculate_roll(username: str, command: str) -> str:
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–º–∞–Ω–¥—É: –∑–∞–º–µ–Ω—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π "–¥"
    normalized_command = command.replace("–∫", "–¥").replace("d", "–¥")
    lines = normalized_command.splitlines()
    results = []
    display_name = is_fox(username)

    if not lines:
        return f"–î–∞, {display_name}?"

    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /–ø–æ–º–æ—â—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    if '/–ø–æ–º–æ—â—å' in normalized_command.lower() or '–ø–æ–º–æ—â—å' in normalized_command.lower():
        return dice_help_message
    elif '–ø–æ—Ü–µ–ª—É–π' in normalized_command.lower():
        return f"üòò"

    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥—ã –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–æ–≤.
    dice_pattern = re.compile(r'(?P<count>\d*)–¥(?P<sides>\d+)((?P<modifiers>([+-]\d+)+))?')
    modifier_pattern = re.compile(r'([+-]\d+)')

    # –ò—â–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –±—Ä–æ—Å–∫–æ–≤ –∫—É–±–∏–∫–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
    matches = dice_pattern.finditer(normalized_command)

    for match in matches:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, —Ç–æ 1)
        count_str = match.group('count')
        dice_count = int(count_str) if count_str.isdigit() else 1

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–Ω–µ–π –∫—É–±–∏–∫–∞
        dice_sides = int(match.group('sides'))

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, +5 –∏–ª–∏ -1)
        modifiers_str = match.group('modifiers') or ""
        modifier_values = modifier_pattern.findall(modifiers_str)

        # –°—É–º–º–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ)
        total_modifiers = sum(int(mod) for mod in modifier_values)

        # –°—É–º–º–∏—Ä—É–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–≤–∞ `-4` –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å `-8`)
        simplified_modifiers = {}
        for mod in modifier_values:
            if mod in simplified_modifiers:
                simplified_modifiers[mod] += 1
            else:
                simplified_modifiers[mod] = 1

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
        modifier_display = ""
        for mod, count in simplified_modifiers.items():
            if mod.startswith("+"):
                modifier_display += f" + {int(mod[1:]) * count} {GEAR_EMOJI}"
            elif mod.startswith("-"):
                modifier_display += f" - {int(mod[1:]) * count} {GEAR_EMOJI}"

        if dice_count > MAX_DICE_COUNT or dice_sides > MAX_DICE_SIDES or dice_sides <= 0:
            results.append(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫—É–±–∏–∫–æ–≤ –∏–ª–∏ –≥—Ä–∞–Ω–µ–π, {display_name}.")
            continue

        roll_results = roll_dice(dice_sides, dice_count)
        total = sum(roll_results) + total_modifiers

        # –ï—Å–ª–∏ —Å—É–º–º–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ <= 0, –≤—ã–≤–æ–¥–∏–º "–í—ã–ø–∞–ª–∞ 1"
        if total <= 0:
            roll_detail = " + ".join([str(roll) for roll in roll_results])  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ –±—Ä–æ—Å–∫–µ
            results.append(f"{display_name}, –≤—ã–ø–∞–ª–∞ 1. ({roll_detail}{modifier_display})")
            continue

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫—É–±–∏–∫–∞
        detailed_rolls = []
        for roll in roll_results:
            if roll == 1:
                detailed_rolls.append(f"{roll}{CRIT_FAIL_EMOJI}")
            elif roll == 20 and dice_sides == 20:
                detailed_rolls.append(f"{roll}{CRIT_SUCCESS_EMOJI}")
            else:
                detailed_rolls.append(str(roll))

        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å–µ—Ö –∫—É–±–∏–∫–æ–≤
        roll_detail = " + ".join(detailed_rolls)
        results.append(f"{display_name}, –∏—Ç–æ–≥: {total}. ({roll_detail}{modifier_display})")

    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É
    if not results:
        return f"{display_name}, –≤ —Ç–≤–æ—ë–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±—Ä–æ—Å–∫–∞."

    return "\n".join(results)
