import json
import time
from messageController import get_user_name

class MarriageController:
    def __init__(self):
        self.marriages = {}
        self.pending_proposals = {}
        self.pending_divorces = {}

    @staticmethod
    def load_marriages():
        try:
            with open('marriages.json', 'r', encoding='utf-8') as file:
                return json.load(file)
        except FileNotFoundError:
            return {}

    @staticmethod
    def save_marriages(marriages):
        with open('marriages.json', 'w', encoding='utf-8') as file:
            json.dump(marriages, file, ensure_ascii=False, indent=4)

    def propose_marriage(self, user_id, peer_id, reply_message=None):
        if reply_message:
            partner_id = reply_message['from_id']
            if user_id == partner_id:
                return '–ù–µ–ª—å–∑—è –∑–∞–∫–ª—é—á–∏—Ç—å –±—Ä–∞–∫ —Å —Å–∞–º–∏–º —Å–æ–±–æ–π!'
            if str(partner_id) in self.marriages.get(str(peer_id), {}):
                return '–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –±—Ä–∞–∫–µ.'
            self.pending_proposals[partner_id] = {'proposer': user_id, 'timestamp': time.time(), 'peer_id': peer_id}
            user_name = get_user_name(user_id)
            return f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º –∑–∞–∫–ª—é—á–∏—Ç—å –±—Ä–∞–∫!üíç –û—Ç–≤–µ—Ç—å—Ç–µ "–ø—Ä–∏–Ω—è—Ç—å –±—Ä–∞–∫", —á—Ç–æ–±—ã —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è.'
        else:
            return '–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –±—Ä–∞–∫.'

    def accept_marriage(self, user_id):
        if user_id in self.pending_proposals:
            if time.time() - self.pending_proposals[user_id]['timestamp'] > 60:
                del self.pending_proposals[user_id]
                return '–í—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.'
            proposer_id = self.pending_proposals[user_id]['proposer']
            peer_id = self.pending_proposals[user_id]['peer_id']
            
            sorted_ids = tuple(sorted([proposer_id, user_id]))
            if str(peer_id) not in self.marriages:
                self.marriages[str(peer_id)] = {}
            
            if str(sorted_ids) not in self.marriages[str(peer_id)]:
                self.marriages[str(peer_id)][str(sorted_ids)] = {'date': time.strftime('%d-%m-%Y')}
                self.save_marriages(self.marriages)
            
            del self.pending_proposals[user_id]
            return f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! {get_user_name(proposer_id)} –∏ {get_user_name(user_id)} —Ç–µ–ø–µ—Ä—å —Å–æ—Å—Ç–æ—è—Ç –≤ –±—Ä–∞–∫–µ.üíçüíñ'
        else:
            return '–í–∞–º –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–ª –±—Ä–∞–∫.'

    def divorce(self, user_id, peer_id):
        self.marriages = self.load_marriages()
        if str(peer_id) in self.marriages:
            for pair, data in self.marriages[str(peer_id)].items():
                if str(user_id) in pair:
                    self.pending_divorces[user_id] = {'peer_id': peer_id, 'timestamp': time.time()}
                    return '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–≤–µ—Å—Ç–∏—Å—å?üò¢ –û—Ç–≤–µ—Ç—å—Ç–µ "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞–∑–≤–æ–¥", —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–∑–≤–æ–¥.'
        return '–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –±—Ä–∞–∫–µ.'

    def confirm_divorce(self, user_id):
        if user_id in self.pending_divorces:
            if time.time() - self.pending_divorces[user_id]['timestamp'] > 60:
                del self.pending_divorces[user_id]
                return '–í—Ä–µ–º—è –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞–∑–≤–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ.'
            peer_id = self.pending_divorces[user_id]['peer_id']
            self.marriages = self.load_marriages()
            if str(peer_id) in self.marriages:
                for pair, data in self.marriages[str(peer_id)].items():
                    if str(user_id) in pair:
                        id1, id2 = eval(pair)
                        partner_id = id1 if str(user_id) == str(id2) else id2
                        del self.marriages[str(peer_id)][pair]
                        self.save_marriages(self.marriages)
                        del self.pending_divorces[user_id]
                        user_name = get_user_name(user_id)
                        partner_name = get_user_name(partner_id)
                        return f'{user_name} –∏ {partner_name} –±–æ–ª—å—à–µ –Ω–µ —Å–æ—Å—Ç–æ—è—Ç –≤ –±—Ä–∞–∫–µ.üò≠üíî'
            return '–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –±—Ä–∞–∫–µ.'
        else:
            return '–£ –≤–∞—Å –Ω–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞–∑–≤–æ–¥–∞.'

    def get_marriages(self, peer_id):
        self.marriages = self.load_marriages()
        return {k: v for k, v in self.marriages.get(str(peer_id), {}).items() if v}

marriage_controller = MarriageController()
