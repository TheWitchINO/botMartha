import random
import time
import json
import os
from controllers.messageController import get_user_name
from controllers.profileController import ProfileController
profile_controller = ProfileController()

class DuelController:
    def __init__(self, player1_id, player2_id):
        self.players = [player1_id, player2_id]
        self.current_turn = random.choice([0, 1])
        self.winner = None
        self.last_shot_time = time.time()

    def shoot(self):
        hit = random.choice([True, False])
        if hit:
            self.winner = self.players[self.current_turn]
        self.current_turn = 1 - self.current_turn
        self.last_shot_time = time.time()
        return hit, self.winner

    def get_current_player(self):
        return self.players[self.current_turn]

    def is_timed_out(self):
        return time.time() - self.last_shot_time > 120

    @staticmethod
    def load_stats():
        if not os.path.exists('data/duel_stats.json'):
            with open('data/duel_stats.json', 'w', encoding='utf-8') as f:
                json.dump({}, f, ensure_ascii=False, indent=4)
        with open('data/duel_stats.json', 'r', encoding='utf-8') as file:
            return json.load(file)

    @staticmethod
    def save_stats(stats):
        with open('data/duel_stats.json', 'w', encoding='utf-8') as file:
            json.dump(stats, file, ensure_ascii=False, indent=4)

    @staticmethod
    def update_stats(peer_id, winner_id, loser_id):
        stats = DuelController.load_stats()
        if str(peer_id) not in stats:
            stats[str(peer_id)] = {}
        if str(winner_id) not in stats[str(peer_id)]:
            stats[str(peer_id)][str(winner_id)] = {"wins": 0, "streak": 0}
        if str(loser_id) not in stats[str(peer_id)]:
            stats[str(peer_id)][str(loser_id)] = {"wins": 0, "streak": 0}
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–±–µ–¥ –∏ streak –¥–ª—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        stats[str(peer_id)][str(winner_id)]["wins"] += 1
        stats[str(peer_id)][str(winner_id)]["streak"] += 1
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º streak –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ
        stats[str(peer_id)][str(loser_id)]["streak"] = 0
        
        DuelController.save_stats(stats)
        return stats[str(peer_id)][str(winner_id)]["streak"]

    @staticmethod
    def get_stats(peer_id):
        stats = DuelController.load_stats()
        peer_stats = stats.get(str(peer_id), {})
        if peer_stats:
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç–æ–ª—å–∫–æ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–±–µ–¥
            sorted_stats = sorted(
                peer_stats.items(),
                key=lambda x: x[1]["wins"],
                reverse=True
            )
            return dict(sorted_stats)
        return {}

    @staticmethod
    def get_duel_stats():
        with open('data/duel_stats.json', 'r', encoding='utf-8') as file:
            stats = json.load(file)
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É–±–∏–π—Å—Ç–≤ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        sorted_stats = sorted(stats.items(), key=lambda x: sum(x[1].values()), reverse=True)
        
        return dict(sorted_stats)

    @staticmethod
    def get_rank(wins):
        ranks = {
            0: '–ü–∞—Ü–∏—Ñ–∏—Å—ÇüòÄ',
            1: '–ì—Ä—è–∑–Ω—É–ª—èüôÇ',
            5: '–ü—Å–∏—Ö–æ–≤–∞–Ω–Ω—ã–πüòê',
            20: '–ë—É–π–Ω—ã–πüò†',
            50: '–Ø—Ä–æ—Å—Ç–Ω—ã–πüò°',
            100: '–£–±–∏–π—Ü–∞ü§¨',
            200: '–î–æ–º–∏–Ω–∞—Ç–æ—Äüëø',
            500: '–ù–µ–æ—Å—Ç–∞–Ω–æ–≤–∏–º—ã–πüòà',
            1000: '–ë–æ–≥–æ–ø–æ–¥–æ–±–Ω—ã–π‚ò†Ô∏è',
            2000: 'V2ü§ñüü•',
            4000: 'V1ü§ñüü¶',
            6000: '–ß–µ–º–ø–∏–æ–Ω —Å–º–µ—Ä—Ç–∏‚ò†Ô∏è',
            8000: '–ê–Ω–≥–µ–ª —Å–º–µ—Ä—Ç–∏‚ò†Ô∏è',
            9999: '–°–∞–º–∞ —Å–º–µ—Ä—Ç—å‚ò†Ô∏è',
        }
        for threshold, rank in sorted(ranks.items(), reverse=True):
            if wins >= threshold:
                return rank
        return '–ü–∞—Ü–∏—Ñ–∏—Å—Ç'

    @staticmethod
    def handle_duel_command(user_id, reply_message=None):
        if reply_message:
            opponent_id = reply_message['from_id']
            if user_id == opponent_id:
                return '–ù–µ–ª—å–∑—è –¥—É—ç–ª–∏—Ç—å—Å—è —Å —Å–∞–º–∏–º —Å–æ–±–æ–π!'
            pending_duels[opponent_id] = {'challenger': user_id, 'timestamp': time.time()}
            user_name = get_user_name(user_id)
            return f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –≤—ã–∑—ã–≤–∞–µ—Ç –≤–∞—Å –Ω–∞ –¥—É—ç–ª—å! –û—Ç–≤–µ—Ç—å—Ç–µ "–ø—Ä–∏–Ω—è—Ç—å –¥—É—ç–ª—å", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.'
        else:
            return '–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –µ–≥–æ –Ω–∞ –¥—É—ç–ª—å.'

    @staticmethod
    def handle_accept_duel(user_id):
        if user_id in pending_duels:
            if time.time() - pending_duels[user_id]['timestamp'] > 60:
                del pending_duels[user_id]
                return '–í—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ –¥—É—ç–ª–∏ –∏—Å—Ç–µ–∫–ª–æ.'
            opponent_id = pending_duels[user_id]['challenger']
            if opponent_id in duels:
                return '–î—É—ç–ª—å —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å.'
            duel = DuelController(opponent_id, user_id)
            duels[user_id] = duel
            duels[opponent_id] = duel
            del pending_duels[user_id]
            user_name = get_user_name(user_id)
            opponent_name = get_user_name(opponent_id)
            return f'–î—É—ç–ª—å –Ω–∞—á–∞–ª–∞—Å—å! {opponent_name} –ø—Ä–æ—Ç–∏–≤ {user_name}. –ü–µ—Ä–≤—ã–π —Ö–æ–¥ –∑–∞ {get_user_name(duel.get_current_player())}.'
        else:
            return '–í–∞—Å –Ω–∏–∫—Ç–æ –Ω–µ –≤—ã–∑—ã–≤–∞–ª –Ω–∞ –¥—É—ç–ª—å.'

    @staticmethod
    def handle_shoot_command(peer_id, user_id):
        if user_id not in duels:
            return '–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –¥—É—ç–ª–∏.'
        duel = duels[user_id]
        if duel.get_current_player() != user_id:
            return '–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥.'
        hit, winner = duel.shoot()
        if winner:
            loser = duel.players[0] if winner == duel.players[1] else duel.players[1]
            del duels[duel.players[0]]
            del duels[duel.players[1]]
            current_streak = DuelController.update_stats(peer_id, winner, loser)
            winner_name = get_user_name(winner)
            streak_msg = f"\n–°–µ—Ä–∏—è —É–±–∏–π—Å—Ç–≤: {current_streak}üî•" if current_streak > 1 else ""
            return f'–ü–æ–ø–∞–¥–∞–Ω–∏–µ!üí• –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_name}.{streak_msg}'
        else:
            next_player_name = get_user_name(duel.get_current_player())
            return f'–ü—Ä–æ–º–∞—Ö!‚ùå –•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ {next_player_name}.'

    @staticmethod
    def check_timeouts():
        for user_id, duel in list(duels.items()):
            if duel.is_timed_out():
                del duels[duel.players[0]]
                del duels[duel.players[1]]
                return f'–î—É—ç–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞. {get_user_name(duel.players[0])} –∏ {get_user_name(duel.players[1])} –Ω–µ —Å–¥–µ–ª–∞–ª–∏ –≤—ã—Å—Ç—Ä–µ–ª –≤–æ–≤—Ä–µ–º—è.'
        return None

duels = {}
pending_duels = {}
