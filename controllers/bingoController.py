import random
import time
from controllers.messageController import get_user_name

class BingoController:
    def __init__(self):
        self.games = {}  # {peer_id: {host_id: id, players: {user_id: card}, drawn_numbers: [], current_game: bool}}
        self.pending_games = {}  # {peer_id: {host_id: id, players: [], timestamp: float}}

    def start_game(self, peer_id, host_id):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–±–±–∏ –¥–ª—è –∏–≥—Ä—ã –≤ –ª–æ—Ç–æ"""
        if peer_id in self.games:
            return "–ò–≥—Ä–∞ –≤ –ª–æ—Ç–æ —É–∂–µ –∏–¥–µ—Ç –≤ —ç—Ç–æ–π –±–µ—Å–µ–¥–µ!"
        
        if peer_id in self.pending_games:
            return "–ù–∞–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤ —É–∂–µ –∏–¥–µ—Ç! –ù–∞–ø–∏—à–∏—Ç–µ '–ª–æ—Ç–æ –≤—Å—Ç—É–ø–∏—Ç—å', —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è."
        
        self.pending_games[peer_id] = {
            "host_id": host_id,
            "players": [host_id],
            "timestamp": time.time()
        }
        
        host_name = get_user_name(host_id)
        return f"üé≤ {host_name} –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–∞–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤ –≤ –ª–æ—Ç–æ!\n\n" \
               f"üìù –î–ª—è —É—á–∞—Å—Ç–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ '–ª–æ—Ç–æ –≤—Å—Ç—É–ø–∏—Ç—å'\n" \
               f"üéØ –î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –≤–µ–¥—É—â–∏–π –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å '–ª–æ—Ç–æ –Ω–∞—á–∞—Ç—å'\n" \
               f"‚è∞ –£ –≤–∞—Å –µ—Å—Ç—å 5 –º–∏–Ω—É—Ç –¥–ª—è –Ω–∞–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–æ–≤"

    def join_game(self, peer_id, user_id):
        """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –ª–æ–±–±–∏ –∏–≥—Ä—ã"""
        if peer_id not in self.pending_games:
            return "‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –≤ –ª–æ—Ç–æ."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è
        if time.time() - self.pending_games[peer_id]["timestamp"] > 300:  # 5 –º–∏–Ω—É—Ç
            del self.pending_games[peer_id]
            return "‚è∞ –í—Ä–µ–º—è –Ω–∞–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–æ–≤ –∏—Å—Ç–µ–∫–ª–æ."

        if user_id in self.pending_games[peer_id]["players"]:
            return "‚úÖ –í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ."

        self.pending_games[peer_id]["players"].append(user_id)
        players_list = [get_user_name(pid) for pid in self.pending_games[peer_id]["players"]]
        
        return f"üéâ {get_user_name(user_id)} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ –≤ –ª–æ—Ç–æ!\n\n" \
               f"üë• –¢–µ–∫—É—â–∏–µ –∏–≥—Ä–æ–∫–∏ ({len(players_list)}): {', '.join(players_list)}\n" \
               f"üéØ –í–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å '–ª–æ—Ç–æ –Ω–∞—á–∞—Ç—å' –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã"

    def start_bingo(self, peer_id, user_id):
        """–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –≤ –ª–æ—Ç–æ (—Ç–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å)"""
        if peer_id not in self.pending_games:
            return "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–æ–±–±–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã."
            
        if self.pending_games[peer_id]["host_id"] != user_id:
            host_name = get_user_name(self.pending_games[peer_id]["host_id"])
            return f"‚ùå –¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π ({host_name}) –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!"
            
        if len(self.pending_games[peer_id]["players"]) < 2:
            return "‚ùå –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –≤ –ª–æ—Ç–æ."

        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤
        players = self.pending_games[peer_id]["players"]
        player_cards = {}
        
        for player_id in players:
            player_cards[player_id] = self._generate_bingo_card()
        
        # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É
        self.games[peer_id] = {
            "host_id": self.pending_games[peer_id]["host_id"],
            "players": player_cards,
            "drawn_numbers": [],
            "current_game": True,
            "numbers_left": list(range(1, 91)),  # –ß–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 90
            "excluded_players": []  # –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –∑–∞ —á–∏—Ç–µ—Ä—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–∏
        }
        
        # –£–¥–∞–ª—è–µ–º –ª–æ–±–±–∏
        del self.pending_games[peer_id]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤
        response = "üé≤ –ò–ì–†–ê –í –õ–û–¢–û –ù–ê–ß–ê–õ–ê–°–¨! üé≤\n\n"
        
        for player_id, card in player_cards.items():
            player_name = get_user_name(player_id)
            response += f"üìã –ö–∞—Ä—Ç–æ—á–∫–∞ {player_name}:\n"
            response += self._format_card(card) + "\n\n"
        
        response += "üéØ –í–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å '–ª–æ—Ç–æ —á–∏—Å–ª–æ', —á—Ç–æ–±—ã –≤—ã—Ç—è–Ω—É—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä!\n"
        response += "‚úÖ –ò–≥—Ä–æ–∫–∏ –æ—Ç–º–µ—á–∞—é—Ç —á–∏—Å–ª–∞ –Ω–∞ —Å–≤–æ–∏—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö"
        
        return response

    def draw_number(self, peer_id, user_id):
        """–í—ã—Ç—è–≥–∏–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∏—Å–ª–∞ (—Ç–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π)"""
        if peer_id not in self.games:
            return "‚ùå –ò–≥—Ä–∞ –≤ –ª–æ—Ç–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞."
            
        if not self.games[peer_id]["current_game"]:
            return "‚ùå –ò–≥—Ä–∞ –≤ –ª–æ—Ç–æ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
            
        if self.games[peer_id]["host_id"] != user_id:
            host_name = get_user_name(self.games[peer_id]["host_id"])
            return f"‚ùå –¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π ({host_name}) –º–æ–∂–µ—Ç –≤—ã—Ç—è–≥–∏–≤–∞—Ç—å —á–∏—Å–ª–∞!"
        
        if not self.games[peer_id]["numbers_left"]:
            return "üéâ –í—Å–µ —á–∏—Å–ª–∞ —É–∂–µ –≤—ã—Ç—è–Ω—É—Ç—ã!"
        
        # –í—ã—Ç—è–≥–∏–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ
        drawn_number = random.choice(self.games[peer_id]["numbers_left"])
        self.games[peer_id]["numbers_left"].remove(drawn_number)
        self.games[peer_id]["drawn_numbers"].append(drawn_number)
        
        response = f"üé≤ –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {drawn_number}\n\n"
        response += f"üìä –í—ã—Ç—è–Ω—É—Ç–æ —á–∏—Å–µ–ª: {len(self.games[peer_id]['drawn_numbers'])}/90\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∫–æ–≥–æ-—Ç–æ –±–∏–Ω–≥–æ (–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è)
        winners = self._check_for_line_winners(peer_id)
        if winners:
            response += "\nüéâ –ë–ò–ù–ì–û! –ó–ê–ü–û–õ–ù–ï–ù–ê –õ–ò–ù–ò–Ø! üéâ\n"
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
            results = self._get_game_results(peer_id)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (1 –º–µ—Å—Ç–æ)
            for winner_id in winners:
                winner_name = get_user_name(winner_id)
                response += f"ü•á 1-–µ –º–µ—Å—Ç–æ: {winner_name} (–∑–∞–ø–æ–ª–Ω–∏–ª –ª–∏–Ω–∏—é!)\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 2-–µ –∏ 3-–µ –º–µ—Å—Ç–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã—Ö —á–∏—Å–µ–ª
            places = self._determine_places(results, winners)
            
            if places.get(2):
                response += f"ü•à 2-–µ –º–µ—Å—Ç–æ: {', '.join([get_user_name(pid) for pid in places[2]])} ({results[places[2][0]]['marked_count']} —á–∏—Å–µ–ª)\n"
            
            if places.get(3):
                response += f"ü•â 3-–µ –º–µ—Å—Ç–æ: {', '.join([get_user_name(pid) for pid in places[3]])} ({results[places[3][0]]['marked_count']} —á–∏—Å–µ–ª)\n"
            
            self.games[peer_id]["current_game"] = False
            response += "\nüéÆ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
        else:
            response += "\nüéØ –í–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å '–ª–æ—Ç–æ —á–∏—Å–ª–æ' –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∏—Å–ª–∞"
        
        return response

    def check_card(self, peer_id, user_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∏–≥—Ä–æ–∫–∞ —Å –æ—Ç–º–µ—á–µ–Ω–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏"""
        if peer_id not in self.games:
            return "‚ùå –ò–≥—Ä–∞ –≤ –ª–æ—Ç–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞."
            
        if user_id not in self.games[peer_id]["players"]:
            return "‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ."
        
        if user_id in self.games[peer_id]["excluded_players"]:
            return "üö® –í—ã –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –∏–≥—Ä—ã –∑–∞ —á–∏—Ç–µ—Ä—Å—Ç–≤–æ! –ë–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å."
        
        card = self.games[peer_id]["players"][user_id]
        drawn_numbers = self.games[peer_id]["drawn_numbers"]
        
        response = f"üìã –í–∞—à–∞ –∫–∞—Ä—Ç–æ—á–∫–∞:\n"
        response += self._format_card_with_marks(card, drawn_numbers)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ —á–∏—Å–µ–ª –æ—Ç–º–µ—á–µ–Ω–æ
        marked_count = sum(1 for row in card for num in row if num in drawn_numbers and num != 0)
        total_count = sum(1 for row in card for num in row if num != 0)
        
        response += f"\n‚úÖ –û—Ç–º–µ—á–µ–Ω–æ: {marked_count}/{total_count}"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–∏–Ω–∏–∏
        line_analysis = self._analyze_lines(card, drawn_numbers)
        if line_analysis:
            response += f"\n\nüìä –ê–Ω–∞–ª–∏–∑ –ª–∏–Ω–∏–π:\n{line_analysis}"
        
        return response

    def get_drawn_numbers(self, peer_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤—ã—Ç—è–Ω—É—Ç—ã–µ —á–∏—Å–ª–∞"""
        if peer_id not in self.games:
            return "‚ùå –ò–≥—Ä–∞ –≤ –ª–æ—Ç–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞."
        
        drawn = self.games[peer_id]["drawn_numbers"]
        if not drawn:
            return "üé≤ –ß–∏—Å–ª–∞ –µ—â–µ –Ω–µ –≤—ã—Ç—è–≥–∏–≤–∞–ª–∏—Å—å."
        
        response = f"üéØ –í—ã—Ç—è–Ω—É—Ç—ã–µ —á–∏—Å–ª–∞ ({len(drawn)}):\n"
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —á–∏—Å–ª–∞ –ø–æ —Å—Ç—Ä–æ–∫–∞–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        response += " ".join(str(num) for num in drawn)
        
        return response

    def get_standings(self, peer_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤"""
        if peer_id not in self.games:
            return "‚ùå –ò–≥—Ä–∞ –≤ –ª–æ—Ç–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞."
        
        results = self._get_game_results(peer_id)
        if not results:
            return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–≥—Ä–æ–∫–∞—Ö."
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã—Ö —á–∏—Å–µ–ª
        sorted_players = sorted(results.items(), key=lambda x: x[1]['marked_count'], reverse=True)
        
        response = "üìä –¢–ï–ö–£–©–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:\n\n"
        
        for i, (player_id, data) in enumerate(sorted_players, 1):
            player_name = get_user_name(player_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–∫–ª—é—á–µ–Ω –ª–∏ –∏–≥—Ä–æ–∫
            if player_id in self.games[peer_id]["excluded_players"]:
                response += f"{i}. üö® {player_name}: –ò–°–ö–õ–Æ–ß–Å–ù –ó–ê –ß–ò–¢–ï–†–°–¢–í–û\n"
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∏–≥—Ä–æ–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏
            card = self.games[peer_id]["players"][player_id]
            drawn_numbers = set(self.games[peer_id]["drawn_numbers"])
            completed_lines = 0
            
            for row in card:
                row_numbers = set(num for num in row if num != 0)
                if row_numbers and row_numbers.issubset(drawn_numbers):
                    completed_lines += 1
            
            if completed_lines > 0:
                response += f"{i}. üéâ {player_name}: {data['marked_count']}/{data['total_count']} —á–∏—Å–µ–ª ({completed_lines} –ª–∏–Ω–∏–π ‚úÖ)\n"
            else:
                response += f"{i}. {player_name}: {data['marked_count']}/{data['total_count']} —á–∏—Å–µ–ª\n"
        
        return response

    def get_excluded_players(self, peer_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∑–∞ —á–∏—Ç–µ—Ä—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤"""
        if peer_id not in self.games:
            return "‚ùå –ò–≥—Ä–∞ –≤ –ª–æ—Ç–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞."
        
        excluded = self.games[peer_id]["excluded_players"]
        if not excluded:
            return "‚úÖ –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω –∑–∞ —á–∏—Ç–µ—Ä—Å—Ç–≤–æ."
        
        response = "üö® –ò–°–ö–õ–Æ–ß–ï–ù–ù–´–ï –ó–ê –ß–ò–¢–ï–†–°–¢–í–û:\n\n"
        for player_id in excluded:
            player_name = get_user_name(player_id)
            response += f"‚ùå {player_name}\n"
        
        return response

    def end_game(self, peer_id, user_id):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã (—Ç–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π)"""
        if peer_id not in self.games:
            return "‚ùå –ò–≥—Ä–∞ –≤ –ª–æ—Ç–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞."
            
        if self.games[peer_id]["host_id"] != user_id:
            host_name = get_user_name(self.games[peer_id]["host_id"])
            return f"‚ùå –¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π ({host_name}) –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É!"
        
        del self.games[peer_id]
        return "üéÆ –ò–≥—Ä–∞ –≤ –ª–æ—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤–µ–¥—É—â–∏–º."

    def force_end_game(self, peer_id):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã (–¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤)"""
        if peer_id not in self.games:
            return "‚ùå –ò–≥—Ä–∞ –≤ –ª–æ—Ç–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞."
        
        del self.games[peer_id]
        return "üéÆ –ò–≥—Ä–∞ –≤ –ª–æ—Ç–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º."

    def cheat_attempt(self, peer_id, user_id):
        """–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–¥–µ–ª–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ —Å –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Ä–∏—Å–∫–æ–º –±—ã—Ç—å –ø–æ–π–º–∞–Ω–Ω—ã–º"""
        if peer_id not in self.games:
            return "‚ùå –ò–≥—Ä–∞ –≤ –ª–æ—Ç–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞."
            
        if not self.games[peer_id]["current_game"]:
            return "‚ùå –ò–≥—Ä–∞ –≤ –ª–æ—Ç–æ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
            
        if user_id not in self.games[peer_id]["players"]:
            return "‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ."
            
        if user_id in self.games[peer_id]["excluded_players"]:
            return "‚ùå –í—ã –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –∏–≥—Ä—ã –∑–∞ —á–∏—Ç–µ—Ä—Å—Ç–≤–æ!"

        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∏–≥—Ä–æ–∫–∞
        card = self.games[peer_id]["players"][user_id]
        drawn_numbers = set(self.games[peer_id]["drawn_numbers"])
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —á–∏—Å–ª–∞ —Å –∫–∞—Ä—Ç–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –±—ã–ª–∏ –≤—ã—Ç—è–Ω—É—Ç—ã
        available_numbers = []
        for row in card:
            for num in row:
                if num != 0 and num not in drawn_numbers:
                    available_numbers.append(num)
        
        if not available_numbers:
            return "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–≤—ã—Ç—è–Ω—É—Ç—ã—Ö —á–∏—Å–µ–ª –¥–ª—è –ø–æ–¥–¥–µ–ª–∫–∏!"
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø–æ–¥–¥–µ–ª–∫–∏
        number = random.choice(available_numbers)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —à–∞–Ω—Å –ø–æ–π–º–∞—Ç—å —á–∏—Ç–µ—Ä–∞ (30%)
        caught = random.random() < 0.3
        
        player_name = get_user_name(user_id)
        
        if caught:
            # –ò–≥—Ä–æ–∫–∞ –ø–æ–π–º–∞–ª–∏!
            self.games[peer_id]["excluded_players"].append(user_id)
            
            response = f"üö® –ß–ò–¢–ï–† –û–ë–ù–ê–†–£–ñ–ï–ù! üö®\n\n"
            response += f"üîç {player_name} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–¥–¥–µ–ª–∞—Ç—å —á–∏—Å–ª–æ {number}, –Ω–æ –±—ã–ª –ø–æ–π–º–∞–Ω!\n"
            response += f"‚öñÔ∏è {player_name} –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ –∏–≥—Ä—ã!\n\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä–æ–∫–∏
            active_players = [pid for pid in self.games[peer_id]["players"].keys() 
                            if pid not in self.games[peer_id]["excluded_players"]]
            
            if len(active_players) <= 1:
                if active_players:
                    winner_name = get_user_name(active_players[0])
                    response += f"üèÜ {winner_name} –ø–æ–±–µ–∂–¥–∞–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!\n"
                else:
                    response += "üéÆ –í—Å–µ –∏–≥—Ä–æ–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã! –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
                self.games[peer_id]["current_game"] = False
                response += "üéÆ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
                
            return response
        else:
            # –ò–≥—Ä–æ–∫ –Ω–µ –ø–æ–π–º–∞–Ω - –¥–æ–±–∞–≤–ª—è–µ–º —á–∏—Å–ª–æ –≤ –≤—ã—Ç—è–Ω—É—Ç—ã–µ
            self.games[peer_id]["drawn_numbers"].append(number)
            
            response = f"üòà {player_name} —Ç–∞–π–Ω–æ –æ—Ç–º–µ—Ç–∏–ª —á–∏—Å–ª–æ {number}...\n\n"
            response += f"ü§´ –ù–∏–∫—Ç–æ –Ω–µ –∑–∞–º–µ—Ç–∏–ª –ø–æ–¥–ª–æ–≥–∞!\n"
            response += f"üìä –ß–∏—Å–ª–æ {number} –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –≤—ã—Ç—è–Ω—É—Ç—ã–º —á–∏—Å–ª–∞–º.\n\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ —á–∏—Ç–µ—Ä—Å—Ç–≤–∞
            winners = self._check_for_line_winners(peer_id)
            if winners and user_id in winners:
                response += f"üéâ {player_name} –∑–∞–ø–æ–ª–Ω–∏–ª –ª–∏–Ω–∏—é –∏ –ø–æ–±–µ–∂–¥–∞–µ—Ç!\n"
                response += f"üòè –ù–æ –Ω–∏–∫—Ç–æ –Ω–µ –∑–Ω–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ –±—ã–ª–æ —á–∏—Ç–µ—Ä—Å—Ç–≤–æ–º...\n\n"
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
                results = self._get_game_results(peer_id)
                places = self._determine_places(results, winners)
                
                if places.get(2):
                    response += f"ü•à 2-–µ –º–µ—Å—Ç–æ: {', '.join([get_user_name(pid) for pid in places[2]])} ({results[places[2][0]]['marked_count']} —á–∏—Å–µ–ª)\n"
                
                if places.get(3):
                    response += f"ü•â 3-–µ –º–µ—Å—Ç–æ: {', '.join([get_user_name(pid) for pid in places[3]])} ({results[places[3][0]]['marked_count']} —á–∏—Å–µ–ª)\n"
                
                self.games[peer_id]["current_game"] = False
                response += "\nüéÆ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
            
            return response

    def _generate_bingo_card(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ª–æ—Ç–æ 3x9 —Å —á–∏—Å–ª–∞–º–∏ –æ—Ç 1 –¥–æ 90"""
        card = [[0 for _ in range(9)] for _ in range(3)]
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª
        for col in range(9):
            if col == 0:
                numbers = list(range(1, 10))
            elif col == 8:
                numbers = list(range(81, 91))
            else:
                numbers = list(range(col * 10, (col + 1) * 10))
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
            selected = random.sample(numbers, 3)
            selected.sort()
            
            for row in range(3):
                card[row][col] = selected[row]
        
        # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —á–∏—Å–ª–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –º–µ—Å—Ç–∞ (0)
        for row in range(3):
            # –í –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 5 —á–∏—Å–µ–ª –∏ 4 –ø—É—Å—Ç—ã—Ö –º–µ—Å—Ç–∞
            positions_to_clear = random.sample(range(9), 4)
            for pos in positions_to_clear:
                card[row][pos] = 0
        
        return card

    def _format_card(self, card):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏: —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞, –ø–æ 5 –≤ —Ä—è–¥—É, –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π"""
        result = ""
        for row in card:
            nums = [str(num).center(3) if num != 0 else "   " for num in row]
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 5 —á–∏—Å–µ–ª, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É—Å—Ç—ã–µ
            filtered = [n for n in nums if n.strip()]
            while len(filtered) < 5:
                filtered.append("   ")
            result += " ".join(filtered) + "\n"
        return result

    def _format_card_with_marks(self, card, drawn_numbers):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏: —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞, –ø–æ 5 –≤ —Ä—è–¥—É, –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π"""
        result = ""
        for row in card:
            nums = []
            for num in row:
                if num == 0:
                    continue
                elif num in drawn_numbers:
                    mark = f"‚úì{num}" if num >= 10 else f"‚úì{num}"
                    nums.append(mark.center(3))
                else:
                    nums.append(str(num).center(3))
            while len(nums) < 5:
                nums.append("   ")
            result += " ".join(nums) + "\n"
        return result

    def _check_for_line_winners(self, peer_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è)"""
        winners = []
        drawn_numbers = set(self.games[peer_id]["drawn_numbers"])
        excluded_players = set(self.games[peer_id]["excluded_players"])
        
        for player_id, card in self.games[peer_id]["players"].items():
            # –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –Ω–µ –º–æ–≥—É—Ç –ø–æ–±–µ–¥–∏—Ç—å
            if player_id in excluded_players:
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é
            for row in card:
                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —á–∏—Å–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ (–∫—Ä–æ–º–µ –ø—É—Å—Ç—ã—Ö –º–µ—Å—Ç)
                row_numbers = set(num for num in row if num != 0)
                
                # –ï—Å–ª–∏ –≤—Å–µ —á–∏—Å–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ –∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã - —É –∏–≥—Ä–æ–∫–∞ –±–∏–Ω–≥–æ
                if row_numbers and row_numbers.issubset(drawn_numbers):
                    winners.append(player_id)
                    break  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–π –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏
        
        return winners

    def _get_game_results(self, peer_id):
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã—Ö —á–∏—Å–µ–ª)"""
        results = {}
        drawn_numbers = set(self.games[peer_id]["drawn_numbers"])
        
        for player_id, card in self.games[peer_id]["players"].items():
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–µ —á–∏—Å–ª–∞
            marked_count = 0
            total_count = 0
            
            for row in card:
                for num in row:
                    if num != 0:
                        total_count += 1
                        if num in drawn_numbers:
                            marked_count += 1
            
            results[player_id] = {
                'marked_count': marked_count,
                'total_count': total_count
            }
        
        return results

    def _determine_places(self, results, winners):
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å 2-–µ –∏ 3-–µ –º–µ—Å—Ç–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã—Ö —á–∏—Å–µ–ª"""
        # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏–∑ –ø–æ–¥—Å—á–µ—Ç–∞ –º–µ—Å—Ç
        remaining_players = {pid: data for pid, data in results.items() if pid not in winners}
        
        if not remaining_players:
            return {}
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã—Ö —á–∏—Å–µ–ª (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        sorted_players = sorted(remaining_players.items(), key=lambda x: x[1]['marked_count'], reverse=True)
        
        places = {}
        current_place = 2  # –ù–∞—á–∏–Ω–∞–µ–º —Å 2-–≥–æ –º–µ—Å—Ç–∞ (1-–µ —É–∂–µ –∑–∞–Ω—è—Ç–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏)
        i = 0
        
        while i < len(sorted_players) and current_place <= 3:
            current_score = sorted_players[i][1]['marked_count']
            same_score_players = []
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            while i < len(sorted_players) and sorted_players[i][1]['marked_count'] == current_score:
                same_score_players.append(sorted_players[i][0])
                i += 1
            
            if same_score_players:
                places[current_place] = same_score_players
                current_place += len(same_score_players)  # –°–ª–µ–¥—É—é—â–µ–µ –º–µ—Å—Ç–æ —Å–¥–≤–∏–≥–∞–µ—Ç—Å—è
        
        return places

    def _analyze_lines(self, card, drawn_numbers):
        """–ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π"""
        analysis = ""
        drawn_set = set(drawn_numbers)
        
        for i, row in enumerate(card, 1):
            row_numbers = [num for num in row if num != 0]
            if not row_numbers:
                continue
                
            marked_in_row = [num for num in row_numbers if num in drawn_set]
            remaining_in_row = [num for num in row_numbers if num not in drawn_set]
            
            if len(remaining_in_row) == 0:
                analysis += f"üéâ –õ–∏–Ω–∏—è {i}: –ó–ê–ü–û–õ–ù–ï–ù–ê!\n"
            elif len(remaining_in_row) == 1:
                analysis += f"üî• –õ–∏–Ω–∏—è {i}: –æ—Å—Ç–∞–ª–æ—Å—å 1 —á–∏—Å–ª–æ ({remaining_in_row[0]})\n"
            elif len(remaining_in_row) == 2:
                analysis += f"‚ö° –õ–∏–Ω–∏—è {i}: –æ—Å—Ç–∞–ª–æ—Å—å 2 —á–∏—Å–ª–∞ ({', '.join(map(str, remaining_in_row))})\n"
            else:
                analysis += f"üìã –õ–∏–Ω–∏—è {i}: –æ—Ç–º–µ—á–µ–Ω–æ {len(marked_in_row)}/{len(row_numbers)}\n"
        
        return analysis.strip()