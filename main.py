from tokenize import group
from typing import Dict, Any
import vk_api
from vk_api.bot_longpoll import VkBotEventType
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from config import token, group_id
from controllers.diceController import calculate_roll
from controllers.messageController import burn_command, choose_option, get_random_joke, hug_command, kiss_command, bonk_command, slap_command, send_message, get_user_name, help_message
from controllers.duelController import DuelController
from controllers.marriageController import MarriageController
from controllers.profileController import ProfileController
from controllers.rouletteController import RouletteController

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ VK
vk_session = vk_api.VkApi(token=token)
longpoll = VkBotLongPoll(vk_session, group_id=group_id, wait=60)
vk = vk_session.get_api()
duels = {}
marriage_controller = MarriageController()
profile_controller = ProfileController()
roulette_controller = RouletteController()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
for event in longpoll.listen():
    if event.type == VkBotEventType.MESSAGE_NEW:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, peer_id –∏ user_id
        message = event.obj.message
        text = message["text"].lower().strip()
        peer_id = message["peer_id"]
        user_id = message["from_id"]

        user_name = get_user_name(user_id)  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

        if "–º–∞—Ä—Ç–∞" in text:
            roll_command = text.split("–º–∞—Ä—Ç–∞", 1)[1].strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            result = calculate_roll(user_name, roll_command)
            send_message(peer_id, result)
        elif "/" in text:
            roll_command = text.split("/", 1)[1].strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            result = calculate_roll(user_name, roll_command)
            send_message(peer_id, result)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        elif text == "–ø—Ä–∏–≤–µ—Ç":
            send_message(peer_id, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")

        elif text == "–ø–æ–∫–∞":
            send_message(peer_id, f"–£–¥–∞—á–∏ –≤–∞–º, {user_name}!")

        elif text == "–ø–æ–º–æ—â—å":
            send_message(peer_id, help_message)

        elif text == "–∞–Ω–µ–∫–¥–æ—Ç":
            send_message(peer_id, get_random_joke())

        elif text == "–¥—É—ç–ª—å":
            if message.get('reply_message'):
                response = DuelController.handle_duel_command(user_id, message['reply_message'])
            else:
                response = DuelController.handle_duel_command(user_id)
            send_message(peer_id, response)

        elif text == "–ø—Ä–∏–Ω—è—Ç—å –¥—É—ç–ª—å":
            response = DuelController.handle_accept_duel(user_id)
            send_message(peer_id, response)

        elif text == "–≤—ã—Å—Ç—Ä–µ–ª":
            response = DuelController.handle_shoot_command(peer_id, user_id)
            send_message(peer_id, response)

        elif text == "–¥—É—ç–ª—å —Å—Ç–∞—Ç–∞":
            stats = DuelController.get_stats(peer_id)
            if not stats:
                response = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—É—ç–ª–µ–π –ø–æ–∫–∞ –ø—É—Å—Ç–∞.'
            else:
                response = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–±–µ–¥ –≤ –¥—É—ç–ª—è—Ö:\n'
                for user_id, user_stats in stats.items():
                    user_name = get_user_name(user_id)
                    wins = user_stats["wins"]
                    streak = user_stats["streak"]
                    rank = DuelController.get_rank(wins)
                    streak_info = f" | –°–µ—Ä–∏—è: {streak}üî•" if streak >= 1 else ""
                    response += f'{user_name}: {wins} ({rank}){streak_info}\n'
            send_message(peer_id, response)

        elif text == "–±—Ä–∞–∫":
            if message.get('reply_message'):
                response = marriage_controller.propose_marriage(user_id, peer_id, message['reply_message'])
            else:
                response = marriage_controller.propose_marriage(user_id, peer_id)
            send_message(peer_id, response)

        elif text == "–ø—Ä–∏–Ω—è—Ç—å –±—Ä–∞–∫":
            response = marriage_controller.accept_marriage(user_id)
            send_message(peer_id, response)

        elif text == "—Ä–∞–∑–≤–æ–¥":
            response = marriage_controller.divorce(user_id, peer_id)
            send_message(peer_id, response)

        elif text == "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞–∑–≤–æ–¥":
            response = marriage_controller.confirm_divorce(user_id)
            send_message(peer_id, response)

        elif text == "–±—Ä–∞–∫–∏":
            marriages = marriage_controller.get_marriages(peer_id)
            if not marriages:
                response = '–í –Ω–∞—à–µ–π –≥–∏–ª—å–¥–∏–∏ –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –≤ –±—Ä–∞–∫–µ!'
            else:
                response = '–°–ø–∏—Å–æ–∫ –±—Ä–∞–∫–æ–≤:\n'
                for pair, data in marriages.items():
                    id1, id2 = eval(pair)
                    user1 = get_user_name(id1)
                    user2 = get_user_name(id2)
                    response += f'{user1} + {user2} (—Å {data["date"]})\n'
            send_message(peer_id, response)

        # elif text == "–º–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
        #     response = profile_controller.get_profile(user_id)
        #     send_message(peer_id, response)

        elif text.startswith("–º–Ω–µ –Ω–∏–∫"):
            nickname = text.split("–º–Ω–µ –Ω–∏–∫", 1)[1].strip()
            if nickname:
                nickname = nickname[0].upper() + nickname[1:]
                profile_controller.set_nickname(user_id, nickname)
                send_message(peer_id, f"–í–∞—à –Ω–∏–∫–Ω–µ–π–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{nickname}'.")
            else:
                send_message(peer_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã '–º–Ω–µ –Ω–∏–∫'.")

        elif text.startswith("–æ–±–Ω—è—Ç—å"):
            reply_message = event.message.get('reply_message')
            response = hug_command(user_id, reply_message)
            send_message(peer_id, response)

        elif text.startswith("–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å"):
            reply_message = event.message.get('reply_message')
            response = kiss_command(user_id, reply_message)
            send_message(peer_id, response)

        elif text.startswith("—Å–∂–µ—á—å"):
            reply_message = event.message.get('reply_message')
            response, image_url = burn_command(user_id, reply_message)
            send_message(peer_id, response, image_url)

        elif text.startswith("—à–ª—ë–ø–Ω—É—Ç—å") or text.startswith("—à–ª–µ–ø–Ω—É—Ç—å"):
            reply_message = event.message.get('reply_message')
            response = slap_command(user_id, reply_message)
            send_message(peer_id, response)

        elif text.startswith("–±–æ–Ω—å–∫"):
            reply_message = event.message.get('reply_message')
            response = bonk_command(user_id, reply_message)
            send_message(peer_id, response)

        elif text == "—Ä—É–ª–µ—Ç–∫–∞":
            response = roulette_controller.start_game(peer_id, user_id)
            send_message(peer_id, response)

        elif text == "—Ä—É–ª–µ—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è":
            response = roulette_controller.join_game(peer_id, user_id)
            send_message(peer_id, response)

        elif text == "—Ä—É–ª–µ—Ç–∫–∞ –Ω–∞—á–∞—Ç—å":
            response = roulette_controller.start_roulette(peer_id)
            send_message(peer_id, response)

        elif text == "—Ä—É–ª–µ—Ç–∫–∞ –≤—ã—Å—Ç—Ä–µ–ª":
            response = roulette_controller.shoot(peer_id, user_id)
            send_message(peer_id, response)

        elif " –∏–ª–∏ " in text:
            response = choose_option(text)
            if response:
                send_message(peer_id, response)

        else:
            #–£—Å–ª–æ–≤–∏–µ –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
            pass
